# Production configuration for Nginx reverse proxy

# Upstream servers with load balancing and failover
upstream frontend {
    # Frontend service (Next.js) with failover protection
    server frontend:${FRONTEND_PORT} max_fails=3 fail_timeout=30s;
    keepalive 32; # Keep 32 connections alive for better performance
}

upstream backend {
    # Backend service (Express.js) with failover protection
    server backend:${BACKEND_PORT} max_fails=3 fail_timeout=30s;
    keepalive 32; # Keep 32 connections alive for better performance
}

# HTTP server block - redirect all HTTP traffic to HTTPS
# This ensures all users are forced to use secure connections
server {
    listen 80; # IPv4
    listen [::]:80; # IPv6
    server_name focus-on-pixel.com www.focus-on-pixel.com;
    return 301 https://$host$request_uri;
}

# HTTPS server block - main production configuration
server {
    listen 443 ssl http2;
    server_name focus-on-pixel.com www.focus-on-pixel.com;

    # SSL configuration (Let's Encrypt certificates)
    ssl_certificate /etc/nginx/ssl/cert.pem; # Domain certificate
    ssl_certificate_key /etc/nginx/ssl/privkey.pem; # Private key
    # 4096-bit DH parameters for strong security (generated at build time)
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    # SSL settings - Modern security configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256';
    ssl_prefer_server_ciphers on;
    ssl_session_timeout 10m;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off; # Disable session tickets for security

    # HSTS (HTTP Strict Transport Security)
    # Force browsers to use HTTPS for 2 years
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # Security headers for comprehensive protection
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always; # Control referrer information
    add_header X-Permitted-Cross-Domain-Policies "none" always; # Prevent cross-domain policy files
    # Content Security Policy - comprehensive protection against various attacks
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' wss:; media-src 'self'; object-src 'none'; child-src 'none'; worker-src 'self'; frame-ancestors 'none'; form-action 'self'; base-uri 'self';" always;

    # Note: Gzip compression is configured globally in nginx.conf
    # This includes gzip on, gzip_vary on, gzip_proxied any, and gzip_types

    # Health check endpoint for monitoring
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # API routes - proxy to backend service
    # This location handles all requests starting with /api/
    location /api/ {
        # Apply rate limiting to prevent abuse
        # zone=api: Use the 'api' rate limit zone defined in nginx.conf
        # burst=10: Allow up to 10 requests beyond the rate limit
        # nodelay: Don't delay requests within the burst limit
        limit_req zone=api burst=10 nodelay;

        # Proxy settings for backend communication
        proxy_pass http://backend; # Forward to backend upstream
        proxy_http_version 1.1; # Use HTTP/1.1 for better features
        proxy_set_header Upgrade $http_upgrade; # Support WebSocket upgrades
        proxy_set_header Connection ""; # Clear connection header for HTTP/1.1
        proxy_set_header Host $host; # Pass original host header
        proxy_set_header X-Real-IP $remote_addr; # Pass client's real IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Append to forwarded chain
        proxy_set_header X-Forwarded-Proto $scheme; # Pass original protocol (https)
        proxy_set_header X-Forwarded-Host $host; # Pass original host

        # Timeouts for backend communication
        proxy_connect_timeout 5s; # Time to establish connection
        proxy_send_timeout 30s; # Time to send request
        proxy_read_timeout 30s; # Time to receive response

        # Buffer settings for optimal performance
        proxy_buffering on; # Enable response buffering
        proxy_buffer_size 4k; # Size of buffer for response headers
        proxy_buffers 8 4k; # Number and size of buffers for response body
        proxy_busy_buffers_size 8k; # Size of buffers that can be busy

        # API caching configuration (not persisted - cleared on restart)
        # This provides short-term caching for API responses
        proxy_cache api_cache_zone; # Use the API cache zone
        proxy_cache_valid 200 302 1m; # Cache successful responses for 1 minute
        proxy_cache_valid 404 1m; # Cache 404 responses for 1 minute
        proxy_cache_bypass $http_pragma $http_authorization; # Bypass cache for specific headers
        proxy_no_cache $http_pragma $http_authorization; # Don't cache responses with these headers
        proxy_cache_revalidate on; # Revalidate stale content with backend
    }

    # Static files and Next.js assets with aggressive caching
    # This location serves static assets from Next.js build
    location /_next/static/ {
        proxy_pass http://frontend; # Forward to frontend service
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Cache static assets for 1 year (they have content hashes)
        expires 1y; # Browser cache for 1 year
        add_header Cache-Control "public, immutable"; # Public cache, never changes
        
        # Security headers for static files
        add_header X-Content-Type-Options nosniff; # Prevent MIME sniffing
    }

    # Public assets - favicon
    location /favicon.ico {
        proxy_pass http://frontend; # Forward to frontend service
        expires 30d; # Cache for 30 days
        add_header Cache-Control "public, no-transform"; # Public cache, no transformation
    }

    # Public assets - robots.txt
    location /robots.txt {
        proxy_pass http://frontend; # Forward to frontend service
        expires 7d; # Cache for 7 days
        add_header Cache-Control "public, no-transform"; # Public cache, no transformation
    }

    # Frontend routes - proxy to Next.js application
    # This is the catch-all location for all other requests
    location / {
        # Apply rate limiting for general web traffic
        # zone=web: Use the 'web' rate limit zone defined in nginx.conf
        # burst=20: Allow up to 20 requests beyond the rate limit
        # nodelay: Don't delay requests within the burst limit
        limit_req zone=web burst=20 nodelay;

        # Proxy settings for frontend communication
        proxy_pass http://frontend; # Forward to frontend upstream
        proxy_http_version 1.1; # Use HTTP/1.1 for better features
        proxy_set_header Upgrade $http_upgrade; # Support WebSocket upgrades
        proxy_set_header Connection ""; # Clear connection header for HTTP/1.1
        proxy_set_header Host $host; # Pass original host header
        proxy_set_header X-Real-IP $remote_addr; # Pass client's real IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Append to forwarded chain
        proxy_set_header X-Forwarded-Proto $scheme; # Pass original protocol (https)
        proxy_set_header X-Forwarded-Host $host; # Pass original host

        # Timeouts for frontend communication
        proxy_connect_timeout 5s; # Time to establish connection
        proxy_send_timeout 30s; # Time to send request
        proxy_read_timeout 30s; # Time to receive response

        # Buffer settings for optimal performance
        proxy_buffering on; # Enable response buffering
        proxy_buffer_size 4k; # Size of buffer for response headers
        proxy_buffers 8 4k; # Number and size of buffers for response body
        proxy_busy_buffers_size 8k; # Size of buffers that can be busy

        # Frontend caching configuration (persisted across restarts)
        # This provides longer-term caching for frontend pages
        proxy_cache frontend_cache_zone; # Use the frontend cache zone
        proxy_cache_valid 200 302 5m; # Cache successful responses for 5 minutes
        proxy_cache_valid 404 1m; # Cache 404 responses for 1 minute
        proxy_cache_bypass $http_pragma $http_authorization; # Bypass cache for specific headers
        proxy_no_cache $http_pragma $http_authorization; # Don't cache responses with these headers
        proxy_cache_revalidate on; # Revalidate stale content with frontend
    }

    # Block access to sensitive files
    # Prevent access to hidden files and directories
    location ~ /\. {
        deny all; # Deny all access
        access_log off; # Don't log these attempts
        log_not_found off; # Don't log 404s for these files
    }

    # Block access to sensitive file types
    location ~ \.(env|log|config)$ {
        deny all; # Deny all access
        access_log off; # Don't log these attempts
        log_not_found off; # Don't log 404s for these files
    }

    # Custom error pages for better user experience
    error_page 404 /404.html; # Custom 404 page
    error_page 500 502 503 504 /50x.html; # Custom 5xx error page
    
    # Location to serve the custom 5xx error page
    location = /50x.html {
        root /usr/share/nginx/html; # Root directory for error pages
    }
} 