# Development configuration for Nginx reverse proxy (HTTPS)

# Upstream servers
# These define the backend services that Nginx will proxy requests to
upstream frontend {
    # Frontend service (Next.js)
    server frontend:${FRONTEND_PORT:-3000};
}

upstream backend {
    # Backend service (Express.js)
    server backend:${BACKEND_PORT:-4000};
}

# HTTP server - redirect to HTTPS (for development)
server {
    listen 80;
    server_name localhost;
    return 301 https://$host$request_uri; # Permanent redirect to HTTPS
}

# HTTPS server for development
server {
    listen 443 ssl http2; # SSL with HTTP/2 support
    server_name localhost;

    # SSL configuration (self-signed certificates for development)
    ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    # SSL settings for development (less strict than production)
    ssl_protocols TLSv1.2 TLSv1.3; # Only modern TLS versions
    # Mozilla SSL Configuration Generator (Modern profile): https://ssl-config.mozilla.org/
    ssl_ciphers 'ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256';
    ssl_prefer_server_ciphers on; # Server chooses cipher preference
    ssl_session_timeout 10m; # SSL session timeout
    ssl_session_cache shared:SSL:10m; # SSL session cache

    # Security headers for development
    add_header X-Frame-Options DENY always; # Prevent clickjacking
    add_header X-Content-Type-Options nosniff always; # Prevent MIME type sniffing
    add_header X-XSS-Protection "1; mode=block" always; # Enable XSS protection

    # Note: Gzip compression is configured globally in nginx.conf
    # This includes gzip on, gzip_vary on, gzip_proxied any, and gzip_types

    # Health check endpoint for monitoring
    location /health {
        access_log off; # Reduce log noise for health checks
        return 200 "healthy\n"; # Simple health response
        add_header Content-Type text/plain;
    }

    # API routes - Proxy requests to the backend service
    # This location block matches all requests starting with /api/
    # Note: proxy_pass without trailing slash (http://backend) means Nginx strips the
    # /api/ prefix from the URI before sending it to the backend.
    # Example: Request for /api/users -> Backend receives: /users
    location /api/ {
        # Apply rate limiting defined in nginx.conf for API traffic
        # 'zone=api' refers to the named zone, 'burst=20' allows up to 20 requests
        # beyond the rate limit before delaying, 'nodelay' means requests are not
        # delayed if they are within the burst size.
        limit_req zone=api burst=20 nodelay;

        # Proxy settings for forwarding requests to the backend
        proxy_pass http://backend; # Forward requests to the 'backend' upstream group
        proxy_http_version 1.1; # Use HTTP/1.1 for persistent connections and WebSocket upgrades
        proxy_set_header Upgrade $http_upgrade; # Required for WebSocket connection upgrades
        proxy_set_header Connection "upgrade"; # Required for WebSocket connection upgrades
        proxy_set_header Host $host; # Pass the original Host header to the backend
        proxy_set_header X-Real-IP $remote_addr; # Pass the client's real IP address
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Append/pass X-Forwarded-For
        proxy_set_header X-Forwarded-Proto $scheme; # Pass the original protocol (http or https)
        proxy_cache_bypass $http_upgrade; # Prevent caching for WebSocket upgrades

        # Timeouts for the proxy connection to the backend
        proxy_connect_timeout 30s; # Max time to establish a connection with the backend
        proxy_send_timeout 30s; # Max time to send a request to the backend
        proxy_read_timeout 30s; # Max time to receive a response from the backend

        # Note: CORS (Cross-Origin Resource Sharing) headers are typically handled by the backend API
        # This prevents duplicate headers and allows the backend to properly validate allowed origins
    }

    # WebSocket support for Next.js Hot Module Replacement (HMR)
    # This location is specifically for Next.js's development server to enable live reloading
    location /_next/webpack-hmr {
        proxy_pass http://frontend; # Proxy to the frontend service for HMR connections
        proxy_http_version 1.1; # Use HTTP/1.1 for WebSocket upgrades
        proxy_set_header Upgrade $http_upgrade; # Required for WebSocket upgrades
        proxy_set_header Connection "upgrade"; # Required for WebSocket upgrades
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Handle static files and Next.js build assets
    # This location block efficiently serves assets from the frontend service
    location /_next/static/ {
        proxy_pass http://frontend; # Proxy static asset requests to the frontend service
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Cache static assets in the browser for a long time (1 year)
        expires 1y;
        add_header Cache-Control "public, immutable"; # Indicate public, unchangeable cache
    }

    # Frontend routes - Proxy all other requests to the Next.js frontend application
    # This is the catch-all location for paths not matched by specific /api/ or /_next/ rules
    location / {
        # Apply rate limiting defined in nginx.conf for general web traffic
        limit_req zone=web burst=50 nodelay;

        # Proxy settings for forwarding requests to the frontend
        proxy_pass http://frontend; # Forward requests to the 'frontend' upstream group
        proxy_http_version 1.1; # Use HTTP/1.1 for persistent connections and WebSocket upgrades
        proxy_set_header Upgrade $http_upgrade; # Required for WebSocket connection upgrades
        proxy_set_header Connection "upgrade"; # Required for WebSocket connection upgrades
        proxy_set_header Host $host; # Pass the original Host header to the frontend
        proxy_set_header X-Real-IP $remote_addr; # Pass the client's real IP address
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Append/pass X-Forwarded-For
        proxy_set_header X-Forwarded-Proto $scheme; # Pass the original protocol (http or https)
        proxy_cache_bypass $http_upgrade; # Prevent caching for WebSocket upgrades

        # Timeouts for the proxy connection to the frontend
        proxy_connect_timeout 30s; # Max time to establish a connection with the frontend
        proxy_send_timeout 30s; # Max time to send a request to the frontend
        proxy_read_timeout 30s; # Max time to receive a response from the frontend
    }

    # Custom error pages for a more user-friendly experience
    error_page 404 /404.html; # Redirect 404 Not Found errors to /404.html
    error_page 500 502 503 504 /50x.html; # Redirect common 5xx errors to /50x.html
    
    # Location to serve the custom 5xx error page
    location = /50x.html {
        root /usr/share/nginx/html; # Specifies the root directory for this error page
    }
}