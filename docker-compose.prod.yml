# Docker Compose v2 format (version field is obsolete)

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: portfolio_postgres_prod
    restart: always
    env_file:
      - .env
    environment:
      # Critical security variables - explicit (no defaults in production)
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./tools/database/init:/docker-entrypoint-initdb.d
    networks:
      - portfolio_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend Service (Node.js/Express)
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
      target: production
    container_name: portfolio_backend_prod
    restart: always
    env_file:
      - .env
    environment:
      # Critical security variables - explicit (no defaults in production)
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      PORT: ${BACKEND_PORT}
      NGINX_URL: ${NGINX_URL}
      CORS_ORIGIN: ${CORS_ORIGIN}
      CORS_CREDENTIALS: ${CORS_CREDENTIALS}
    volumes:
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - portfolio_network
    healthcheck:
      test: ["CMD", "curl", "-f", "${NGINX_URL}:${BACKEND_PORT}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
      replicas: 2

  # Frontend Service (Next.js)
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
      target: production
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NGINX_URL: ${NGINX_URL}
    container_name: portfolio_frontend_prod
    restart: always
    env_file:
      - .env
    environment:
      # Critical configuration - explicit (no defaults in production)
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NGINX_URL: ${NGINX_URL}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - portfolio_network
    healthcheck:
      test: ["CMD", "curl", "-f", "${NGINX_URL}:${FRONTEND_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./tools/nginx
      dockerfile: Dockerfile
      target: production
      args:
        GENERATE_DEV_CERTS: false
    container_name: portfolio_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./tools/nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt/live/focus-on-pixel.com:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - nginx_frontend_cache:/var/cache/nginx/frontend_cache
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - portfolio_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Redis Cache (Optional for production)
  redis:
    image: redis:8-alpine
    container_name: portfolio_redis_prod
    restart: always
    env_file:
      - .env
    environment:
      # Critical security variables - explicit (no defaults in production)
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - portfolio_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  nginx_frontend_cache:
    driver: local

networks:
  portfolio_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16 